# -*- coding: utf-8 -*-
"""Section 1: Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKeEVMkUgcoHwobptza0M20D4-RFyKXO

Task 1.1: Load and explore data
"""

#Import library
import pandas as pd
import matplotlib.pyplot as plt

#Load CSV files using pandas
sales_pricing = pd.read_csv('sales_pricing.csv')
products_pricing = pd.read_csv('products_pricing.csv')
price_elasticity = pd.read_csv('price_elasticity.csv')
customer_pricing_sensitivity = pd.read_csv('customer_pricing_sensitivity.csv')

#Preview top 5 rows of data: Sales
sales_pricing.head()

#Preview top 5 rows of data: Products
products_pricing.head()

#Preview top 5 rows of data: Price_Elasticitiy
price_elasticity.head()

#Preview top 5 rows of data: Customer_Pricing_Sensitivity
customer_pricing_sensitivity.head()

"""Task 1.2: Check for missing values

Table: sales_pricing
"""

#Check dataframe info & column type
sales_pricing.info()

#Check if there's missing values on each column or not
sales_pricing.isnull().any()

#Replace missing values with the mean for numerical column
sales_pricing['QUANTITY_SOLD'] = sales_pricing['QUANTITY_SOLD'].fillna(sales_pricing['QUANTITY_SOLD'].mean())
sales_pricing['TOTAL_SALE_VALUE'] = sales_pricing['TOTAL_SALE_VALUE'].fillna(sales_pricing['TOTAL_SALE_VALUE'].mean())

"""Table: products_pricing"""

#Check dataframe info & column type
products_pricing.info()

#Check if there's missing values on each column or not
products_pricing.isnull().any()

#Replace missing values with the mean for numerical column
products_pricing['COST_PRICE'] = products_pricing['COST_PRICE'].fillna(products_pricing['COST_PRICE'].mean())
products_pricing['RECOMMENDED_PRICE'] = products_pricing['RECOMMENDED_PRICE'].fillna(products_pricing['RECOMMENDED_PRICE'].mean())
products_pricing['CURRENT_PRICE'] = products_pricing['CURRENT_PRICE'].fillna(products_pricing['CURRENT_PRICE'].mean())

"""Table: price_elasticity"""

#Check dataframe info & column type
price_elasticity.info()

#Check if there's missing values on each column or not
price_elasticity.isnull().any()

#Replace missing values with the mean for numerical column
price_elasticity['PERCENTAGE_PRICE_CHANGE'] = price_elasticity['PERCENTAGE_PRICE_CHANGE'].fillna(price_elasticity['PERCENTAGE_PRICE_CHANGE'].mean())
price_elasticity['PERCENTAGE_CHANGE_IN_SALES'] = price_elasticity['PERCENTAGE_CHANGE_IN_SALES'].fillna(price_elasticity['PERCENTAGE_CHANGE_IN_SALES'].mean())
price_elasticity['PRICE_ELASTICITY_COEFFICIENT'] = price_elasticity['PRICE_ELASTICITY_COEFFICIENT'].fillna(price_elasticity['PRICE_ELASTICITY_COEFFICIENT'].mean())

"""Table: customer_pricing_sensitivity"""

#Check dataframe info & column type
customer_pricing_sensitivity.info()

#Check if there's missing values on each column or not
customer_pricing_sensitivity.isnull().any()

#Replace missing values with the mean for numerical column
customer_pricing_sensitivity['PRICE_SENSITIVITY'] = customer_pricing_sensitivity['PRICE_SENSITIVITY'].fillna(customer_pricing_sensitivity['PRICE_SENSITIVITY'].mean())

"""Task 1.3: Inspect summary statistics"""

#Display the summary statistics for the total_sale_value column in the sales_pricing.csv dataset.
sales_pricing['TOTAL_SALE_VALUE'].describe()

"""Task 1.4: Data transformation"""

#Add a new column profit_margin = (recommended_price - cost_price) / recommended_price to the products_pricing.csv dataset.
products_pricing['profit_margin'] = (products_pricing['RECOMMENDED_PRICE'] - products_pricing['COST_PRICE'])/products_pricing['RECOMMENDED_PRICE']

#Preview top 5 rows after adding profit_margin column
products_pricing.head()

"""Task 1.5: Group and aggregate data"""

#Group the sales_pricing.csv data by product_id, and calculate total quantity_sold and total_sale_value. Sort by total_sale_value.
sales_pricing_groupby = sales_pricing.groupby('PRODUCT_ID')[['QUANTITY_SOLD', 'TOTAL_SALE_VALUE']].sum().sort_values(by='TOTAL_SALE_VALUE')

#Preview top 5 rows of sales_pricing after grouping by product_id and sort by total_sale_value
sales_pricing_groupby.head()

"""Task 1.6: Data visualization"""

#Plot a bar chart of the top 10 products by total_sale_value

#Create a dataframe that contains top 10 products by total_sale value
sales_pricing_groupby = sales_pricing.groupby('PRODUCT_ID')[['TOTAL_SALE_VALUE']].sum()
top_10_products = sales_pricing_groupby.sort_values(by='TOTAL_SALE_VALUE', ascending=False).head(10)
#Preview data after creating dataframe
top_10_products.head(10)

#Set figure size for better readability
plt.figure(figsize=(12, 6))

#Create the bar chart
#x-axis: product IDs (index of the Series) ==> Need to convert to String type
#y-axis: total sale values (values of the Series)
plt.bar(x=top_10_products.index.astype(str), height=top_10_products['TOTAL_SALE_VALUE'], color='skyblue')

#Add titles and labels for clarity
plt.title('Top 10 Products by Total Sale Value', fontsize=16)
plt.xlabel('Product ID', fontsize=12)
plt.ylabel('Total Sale Value', fontsize=12)

#Rotate x-axis labels if they overlap
plt.xticks(rotation=45, ha='right') # 'ha' (horizontal alignment) makes labels align nicely

#Add grid for better readability of values
plt.grid(axis='y', linestyle='--', alpha=0.7)

#Ensure layout is tight to prevent labels from being cut off
plt.tight_layout()

#Display the plot
plt.show()